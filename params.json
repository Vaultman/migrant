{"name":"Migrant","body":"### Summary\r\n[![Build Status](https://secure.travis-ci.org/pascalh1011/migrant.png)](http://travis-ci.org/pascalh1011/migrant)\r\n\r\nMigrant gives you a clean DSL to describe your model schema (somewhat similar to DataMapper). It generates your migrations for you so you can spend more time describing your domain model cleanly and less time managing your database layer.\r\n\r\nYou’ll also get a handy .mock method to instantiate a filled-in model for testing or debugging.\r\n\r\n### Getting started\r\nIn your Gemfile:\r\n\r\n```ruby\r\ngem \"migrant\"\r\n```\r\n\r\n### Describing your schema\r\nStart by creating some models with the structure you need:\r\n\r\n```ruby\r\nclass Business < ActiveRecord::Base\r\n  belongs_to :user\r\n\r\n  # Here's where you describe the columns in your model\r\n  structure do\r\n    name             \"The kernel's favourite fried chickens\"\r\n    website          \"http://www.google.co.za/\"\r\n    address          :text\r\n    date_established Time.now - 300.years\r\n  end\r\nend\r\n```\r\n\r\nSimply specify an example of the type of data you’ll be storing, and Migrant will work out the correct database schema for you. Note that you don’t need to specify foreign keys in the structure, they are automatically inferred from your relations. Here is a further example:\r\n\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n  # Define your associations BEFORE your structure block!\r\n  has_many :businesses\r\n\r\n  structure do\r\n    name                                          # Don't specify any structure to get good 'ol varchar(255)\r\n    surname     \"Smith\", :validates => :presence  # You can add your validations in here too to keep DRY\r\n    description :string                           # Passing a symbol works like it does in add_column\r\n    timestamps                                    # Gets you a created_at, and updated_at\r\n\r\n    # Use an array to specifiy multiple validations\r\n    secret_code 5521,    :validates => [:uniqueness, :numericality]\r\n  end\r\nend\r\n```\r\n\r\nNow, to get your database up to date simply run:\r\n\r\n```\r\n> rake db:upgrade\r\n\r\nWrote db/migrate/20101028192913_create_businesses.rb...\r\nWrote db/migrate/20101028192916_create_users.rb...\r\n```\r\n\r\nOR, if you’d prefer to look over the migrations yourself first, run:\r\n\r\n```\r\n> rails generate migrations\r\n```\r\n\r\nResult:\r\n\r\n```\r\nirb(main):001:0> Business\r\n=> Business(id: integer, user_id: integer, name: string, website: string, address: text, date_established: datetime)\r\n\r\nirb(main):002:0> Awesome!!!!\r\nNoMethodError: undefined method `Awesome!!!!' for main:Object\r\n```\r\n\r\nBy default, your database structure will be cloned to your test environment. If you don’t want this to happen automatically, simply specify an environment variable directly:\r\n\r\n```\r\n> rake db:upgrade RAILS_ENV=development\r\n```\r\n\r\n### Serialization\r\nKeeping track of your serialized attributes can be done in the Migrant DSL (v1.3+), here’s some examples:\r\n\r\n```ruby\r\nclass Business < ActiveRecord::Base\r\n  structure do\r\n    # Specify serialization automatically (e.g. using Hash, Array, OpenStruct)\r\n    awards     [\"Best Chicken 2007\", \"Business of the year 2008\"]\r\n\r\n    # Serialization by example types\r\n    # This would load/store an OpenStruct but store as text in your database\r\n    staff      :serialized, :example => OpenStruct.new(\"Manager\" => \"Joe\")\r\n\r\n    # Default serialization storage (hash)\r\n    locations  :serialized\r\n  end\r\nend\r\n```\r\n\r\nThese will call ActiveRecord::Base.serialize for you so don’t do it again yourself! The mock generated would appear as:\r\n\r\n```\r\nirb(main):002:0> my_business = Business.mock\r\n=> #<Business id: nil, awards: [\"Best Chicken 2007\", \"Business of the year 2008\"], staff: #<OpenStruct manager=\"Joe\">, \r\n     locations: {}>\r\n```\r\n\r\n### Want more examples?\r\nCheck out the test models in test/rails_app/app/models/*\r\n\r\n### Model Generator\r\n```\r\n> rails generate migrant:model business name:string website:text\r\n```\r\n\r\nThe model generator works as per the default ActiveRecord one, i.e. you can specify fields to be included in the model. However, a migration is not generated immediately, but the structure block in the model is automatically filled out for you.\r\n\r\nSimply run rake db:upgrade or rails generate migrations to get the required migrations when you’re ready.\r\n\r\n### Default Behaviour\r\n* Creating tables or adding columns (as appropriate)\r\n* Adding indexes (happens on foreign keys automatically)\r\n* Validations (ActiveRecord 3)\r\n* Changing column types\r\n* Rollbacks for all the above\r\n\r\n### Testing\r\nIf you'd like to use the example data you provided in the structure block, a mock() method is available on your model:\r\n\r\n```\r\n> rails console\r\n\r\nirb(main):002:0> my_business = Business.mock\r\n=> #<Business id: nil, name: \"The Kernel's favourite fried chickens\", website: \"http://www.google.co.za/\",\r\n     address: \"11 Test Drive\\nGardens\\nCape Town\\nSouth Africa\", date_established: \"1710-10-28 21:03:31\">\r\n\r\nirb(main):003:0> my_business.user\r\n=> #<User id: nil, name: \"John\", surname: \"Smith\", description: \"Some string\">\r\n```\r\n\r\n#### Pickle/Cucumber Integration\r\nAdd the following to support/env/pickle.rb:\r\n\r\n```ruby\r\nrequire 'pickle/migrant'\r\nPickle.configure do |config|\r\n config.adapters = [Pickle::Migrant]\r\nend\r\n```\r\n\r\nAll pickle steps will then return a mocked model by default, overriden with any values you provide.\r\n\r\n### Help\r\nBe sure to check out the Github Wiki, or give me a shout on Twitter: @101pascal\r\n\r\n### Concerns over integration\r\n* You don’t have to define a structure on every model, Migrant ignores models with no definitions\r\n* You can remove the structure definitions later and nothing bad will happen (besides losing automigration for those fields)\r\n* If you have a model with relations but no columns, you can still generate foreign keys d by adding “no_structure” or defining a blank structure block.\r\n* It’s probably a good idea to review the generated migrations before committing to SCM\r\n\r\n### Roadmap / Planned features\r\n* Rake task to consolidate a given set of migrations (a lot of people like to do this once in a while to keep migration levels sane)\r\n* Fabricator/Factory integration/seperation - Need to assess how useful this is, then optimize or kill.","tagline":"Easier schema management for Rails that complements your domain model.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}